diff --git a/application.c b/application.c
index 5302ab2..e7e2e70 100644
--- a/application.c
+++ b/application.c
@@ -1,6 +1,7 @@
 #include "application.h"
 
 #include <stdbool.h>
+#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
@@ -106,7 +107,7 @@ err:
 }
 
 bool
-application_execute(const struct application *app, const struct prompt *prompt)
+application_execute(const struct application *app, const struct prompt *prompt, const char *launch_prefix)
 {
     const wchar_t *ptext = prompt_text(prompt);
     const size_t clen = wcstombs(NULL, ptext, 0);
@@ -124,7 +125,13 @@ application_execute(const struct application *app, const struct prompt *prompt)
     }
 
     /* Tokenize the command */
-    char *copy = strdup(execute);
+    char *copy;
+    if (launch_prefix != NULL) {
+      copy = malloc(strlen(execute) + strlen(launch_prefix) + 2 /* whitespace + null terminator */);
+      sprintf(copy, "%s %s", launch_prefix, execute);
+    } else {
+      copy = strdup(execute);
+    }
     char **argv;
     if (!tokenize_cmdline(copy, &argv)) {
         free(copy);
diff --git a/application.h b/application.h
index 5669100..ad465b6 100644
--- a/application.h
+++ b/application.h
@@ -54,7 +54,7 @@ struct application {
 };
 
 bool application_execute(
-    const struct application *app, const struct prompt *prompt);
+    const struct application *app, const struct prompt *prompt, const char* launch_prefix);
 
 struct application_list {
     struct application *v;
diff --git a/main.c b/main.c
index 9646a7d..4c5e9ca 100644
--- a/main.c
+++ b/main.c
@@ -202,6 +202,7 @@ print_usage(const char *prog_name)
            "                                 is empty (dmenu mode only)\n"
            "     --line-height=HEIGHT        override line height from font metrics\n"
            "     --letter-spacing=AMOUNT     additional letter spacing\n"
+           "     --launch-prefix             string to add before argv of executed program\n"
            "  -v,--version                   show the version number and quit\n");
     printf("\n");
     printf("Colors must be specified as a 32-bit hexadecimal RGBA quadruple.\n");
@@ -258,6 +259,7 @@ int
 main(int argc, char *const *argv)
 {
     #define OPT_LETTER_SPACING 256
+    #define OPT_LAUNCH_PREFIX  257
 
     static const struct option longopts[] = {
         {"output"  ,             required_argument, 0, 'o'},
@@ -284,6 +286,7 @@ main(int argc, char *const *argv)
         {"no-run-if-empty",      no_argument,       0, 'R'},
         {"line-height",          required_argument, 0, 'H'},
         {"letter-spacing",       required_argument, 0, OPT_LETTER_SPACING},
+        {"launch-prefix",        required_argument, 0, OPT_LAUNCH_PREFIX},
         {"version",              no_argument,       0, 'v'},
         {"help",                 no_argument,       0, 'h'},
         {NULL,                   no_argument,       0, 0},
@@ -299,6 +302,7 @@ main(int argc, char *const *argv)
     bool dmenu_mode = false;
     bool no_run_if_empty = false;
     bool icons_enabled = true;
+    const char *launch_prefix = NULL;
 
     struct render_options render_options = {
         .lines = 15,
@@ -508,6 +512,11 @@ main(int argc, char *const *argv)
             break;
         }
 
+        case OPT_LAUNCH_PREFIX: {
+            launch_prefix = optarg;
+            break;
+        }
+
         case 'v':
             printf("fuzzel version %s\n", FUZZEL_VERSION);
             return EXIT_SUCCESS;
@@ -581,7 +590,7 @@ main(int argc, char *const *argv)
 
     if ((wayl = wayl_init(
              fdm, render, prompt, matches, &render_options,
-             dmenu_mode, output_name, font_name, dpi_aware,
+             dmenu_mode, launch_prefix, output_name, font_name, dpi_aware,
              &font_reloaded, &font_reloaded_data)) == NULL)
         goto out;
 
diff --git a/wayland.c b/wayland.c
index 7693997..2e25a44 100644
--- a/wayland.c
+++ b/wayland.c
@@ -170,6 +170,7 @@ struct wayland {
     enum { KEEP_RUNNING, EXIT_UPDATE_CACHE, EXIT} status;
     int exit_code;
     bool dmenu_mode;
+    const char *launch_prefix;
 
     bool frame_is_scheduled;
     struct buffer *pending;
@@ -611,7 +612,7 @@ keyboard_key(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial,
             dmenu_execute(app, wayl->prompt);
             wayl->exit_code = EXIT_SUCCESS;
         } else {
-            bool success = application_execute(app, wayl->prompt);
+            bool success = application_execute(app, wayl->prompt, wayl->launch_prefix);
             wayl->exit_code = success ? EXIT_SUCCESS : EXIT_FAILURE;
 
             if (success && match != NULL) {
@@ -1624,7 +1625,7 @@ parse_font_spec(const char *font_spec, size_t *count, struct font_spec **specs)
 struct wayland *
 wayl_init(struct fdm *fdm,
           struct render *render, struct prompt *prompt, struct matches *matches,
-          const struct render_options *render_options, bool dmenu_mode,
+          const struct render_options *render_options, bool dmenu_mode, const char* launch_prefix,
           const char *output_name, const char *font_spec,
           enum dpi_aware dpi_aware,
           font_reloaded_t font_reloaded_cb, void *data)
@@ -1638,6 +1639,7 @@ wayl_init(struct fdm *fdm,
         .status = KEEP_RUNNING,
         .exit_code = EXIT_FAILURE,
         .dmenu_mode = dmenu_mode,
+        .launch_prefix = launch_prefix,
         .output_name = output_name != NULL ? strdup(output_name) : NULL,
         .render_options = render_options,
         .font_reloaded = {
diff --git a/wayland.h b/wayland.h
index c674935..b32e95b 100644
--- a/wayland.h
+++ b/wayland.h
@@ -22,7 +22,7 @@ enum dpi_aware {DPI_AWARE_AUTO, DPI_AWARE_YES, DPI_AWARE_NO};
 struct wayland *wayl_init(
     struct fdm *fdm,
     struct render *render, struct prompt *prompt, struct matches *matches,
-    const struct render_options *render_options, bool dmenu_mode,
+    const struct render_options *render_options, bool dmenu_mode, const char* launch_prefix,
     const char *output_name, const char *font_spec, enum dpi_aware dpi_aware,
     font_reloaded_t font_reloaded_cb, void *data);
 
